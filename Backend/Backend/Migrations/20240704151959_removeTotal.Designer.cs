// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20240704151959_removeTotal")]
    partial class removeTotal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Modelos.ProductLine", b =>
                {
                    b.Property<int>("ProductLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductLineID"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShoppingListID")
                        .HasColumnType("int");

                    b.HasKey("ProductLineID");

                    b.HasIndex("ShoppingListID");

                    b.ToTable("ProductLines");
                });

            modelBuilder.Entity("Backend.Modelos.Recipe", b =>
                {
                    b.Property<int>("RecipeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeID"));

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PreparationTime")
                        .HasColumnType("int");

                    b.Property<string>("RecipeImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecipeTagID")
                        .HasColumnType("int");

                    b.Property<int>("ServingsNumber")
                        .HasColumnType("int");

                    b.Property<string>("Steps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("RecipeID");

                    b.HasIndex("RecipeTagID");

                    b.HasIndex("UserID");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("Backend.Modelos.ShoppingList", b =>
                {
                    b.Property<int>("ShoppingListID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingListID"));

                    b.Property<string>("ShoppingListName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ShoppingListID");

                    b.HasIndex("UserID");

                    b.ToTable("ShoppingLists");
                });

            modelBuilder.Entity("Backend.Modelos.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetPasswordToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Validate")
                        .HasColumnType("bit");

                    b.Property<string>("ValidateToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Modelos.UserTag", b =>
                {
                    b.Property<int>("UserTagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTagID"));

                    b.Property<int>("RecipeTagID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserTagID");

                    b.HasIndex("RecipeTagID");

                    b.HasIndex("UserID", "RecipeTagID")
                        .IsUnique();

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("Backend.Models.RecipeTag", b =>
                {
                    b.Property<int>("RecipeTagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecipeTagID"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecipeTagID");

                    b.ToTable("RecipeTags");
                });

            modelBuilder.Entity("Backend.Modelos.ProductLine", b =>
                {
                    b.HasOne("Backend.Modelos.ShoppingList", null)
                        .WithMany("ProductLines")
                        .HasForeignKey("ShoppingListID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Modelos.Recipe", b =>
                {
                    b.HasOne("Backend.Models.RecipeTag", "RecipeTag")
                        .WithMany()
                        .HasForeignKey("RecipeTagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Modelos.User", "User")
                        .WithMany("Recipes")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecipeTag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Modelos.ShoppingList", b =>
                {
                    b.HasOne("Backend.Modelos.User", null)
                        .WithMany("ShoppingLists")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Modelos.UserTag", b =>
                {
                    b.HasOne("Backend.Models.RecipeTag", "RecipeTag")
                        .WithMany()
                        .HasForeignKey("RecipeTagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Modelos.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RecipeTag");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Modelos.ShoppingList", b =>
                {
                    b.Navigation("ProductLines");
                });

            modelBuilder.Entity("Backend.Modelos.User", b =>
                {
                    b.Navigation("Recipes");

                    b.Navigation("ShoppingLists");

                    b.Navigation("UserTags");
                });
#pragma warning restore 612, 618
        }
    }
}
